#include <DS3231.h>
#include <Wire.h>
#include <Stepper.h>
//SERVO PIN10
//LED PIN7
//BUZZER PIN9
//SENSOR PIR2 (OUT)
#include <Servo.h>
// servomotor
Servo servoMotor;
int LED = 6;
int PIR = 3;
// Buzzer
int BUZZER = 13;
//Fotoresistencia
int LDR = A0;

// --- motor stepper
#define IN1 8
#define IN2 9
#define IN3 10
#define IN4 11
// 2048 pasos para una revolución completa (360 grados)
int pasosPorVuelta = 2048;
// Velocidad del stepper
int motSpeed = 15;
// 90 grados del stepper para abrir ventana
int pasosPara90Grados = pasosPorVuelta / 4;

//pines que utilizamos en arduino del stepper
Stepper myStepper(pasosPorVuelta, 8, 10, 9, 11);

// sensor y bomba
const int bombaAgua = 12;
const int sensorAgua = A1;
const int limiteNivelAgua = 300;
// ---- DS3231
//Direccionamiento del hardware
DS3231 Clock;
RTClib RTC;
int year, month, day, hour, minute, second;
bool funcionEjecutada = false;
// función de utilidad DS3231
// boolenano para la alarma
bool alarmaActiva = false;

//Función de utilidad para items de la alarma (PIR-BUZZER,LDR-LED Y LLENADO DE DEPOSITO DE AGUA)
void activarItemsDeLaAlarma() {
  bool lecturaPIR;
  //fotoresistencia
  int lecturaLDR;
  const int limiteLuz = 200;
  //bomba de agua
  int nivelDelAguaDetectado;

  //bomba de agua
  nivelDelAguaDetectado = analogRead(sensorAgua);

  /* Serial.print("Nivel del agua: ");
  Serial.println(nivelDelAguaDetectado);
  // delay(50);
  // limitenivel = 300
  if(nivelDelAguaDetectado > limiteNivelAgua) {
    digitalWrite(bombaAgua, HIGH);
  } else {
    digitalWrite(bombaAgua, LOW);
  } */

  // PIR
  lecturaPIR = digitalRead(PIR);
  //encender buzzer
  if(lecturaPIR == true) {
    tone(BUZZER,330);
  } else if(lecturaPIR == false) {
    noTone(BUZZER);
  }
  Serial.println(lecturaPIR);
  delay(500);

  // fotoresistencia
  lecturaLDR = analogRead(LDR);
  Serial.println(lecturaLDR);
  //encender led si fotoresistencia detecta oscuridad
  if(lecturaLDR <= limiteLuz) {
    digitalWrite(LED,HIGH);
    delay(500);
  } else if(lecturaLDR >= limiteLuz){
    digitalWrite(LED, LOW);
  }
}

void setup() {
  // put your setup code here, to run once:
  // DS3231
  Wire.begin();
  Serial.begin(9600);
  //servomotor en el pin 7
  servoMotor.attach(7);
  //inicia en la posición 0
  servoMotor.write(0);

  // motor stepper
  myStepper.setSpeed(motSpeed);
  // pinMode(LED,OUTPUT);
  // verFechaYHoraDS();

  // LED 
  pinMode(LED, OUTPUT);
  // Buzzer
  noTone(BUZZER);  

  //PIR
  pinMode(PIR, INPUT);

  // bomba de agua
//  pinMode(bombaAgua, OUTPUT);
}

void loop() {
  // put your main code here, to run repeatedly:
  /*  int lecturaPIR = digitalRead(PIR);
  Serial.print("valor PIR: ");
  Serial.println(lecturaPIR); */

  char lecturaSerial = Serial.read();
  
  if(alarmaActiva == true) {
    activarItemsDeLaAlarma();
  } else {
     // reiniciar valores de los items cuando la alarma se apague
    noTone(BUZZER);1
    digitalWrite(LED,LOW);
  }
  // Manda la lectura serial desde winforms '5' contraseña aprobada
  if(lecturaSerial == '5') {
    // activar / desactivar alarma
    alarmaActiva = !alarmaActiva;
  }

  // falta detectar si la alarma ya fue introducida una vez, algo como una lógica de switch

  // Abrir y cerrar puerta (servomotor)
  if (lecturaSerial == '1') {
    servoMotor.write(180);
  }

  if (lecturaSerial == '2') {
    servoMotor.write(0);
    // digitalWrite(LED,HIGH);
    delay(50);
  }

  // Abrir y cerrar ventana (motor stepper)
  // motor stepper
  if (lecturaSerial == '3') {
    myStepper.step(pasosPara90Grados);
    // delay(500);
  }

  if (lecturaSerial == '4') {
    myStepper.step(-pasosPara90Grados);
    // delay(500);
  }

  //Activar / desactivar alarma
  // nota: activa PIR con buzzer, fotoresistencia con LED y bomba de agua.
  

  // DS3231 Apagar y encender luces
  // programar hora de encendido de luces
  
}
